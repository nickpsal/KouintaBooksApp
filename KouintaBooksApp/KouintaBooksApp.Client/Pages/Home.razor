@page "/"
@rendermode InteractiveServer

<PageTitle>Kouinta Books App</PageTitle>
<h1>Kouinta Books List</h1>
<div class="card-body">
    <label>Search by Title</label><InputText @bind-Value="searchInput" /><button @onclick="HandleSearch">Search</button>
    <button @onclick="NewBookHandle">Add</button>
    <button>Export to PDF</button>
    <table class="table table-striped table table-bordered">
        <thead>
             <tr>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("BookID")'>Id @RenderSortArrow("BookID")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("bookTitle")'>Title @RenderSortArrow("bookTitle")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("publisherName")'>Publisher @RenderSortArrow("publisherName")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("bookYear")'>Year @RenderSortArrow("bookYear")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("bookPriceWVatND")'>Book Priced @RenderSortArrow("bookPriceWVatND")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("finalBookPriceNoVat")'>Final Price w VAT @RenderSortArrow("finalBookPriceNoVat")</th>
                 <th style="cursor: pointer;" @onclick='() => SortBooksByHeader("finalBookPrice")'>Final Price incl VAT @RenderSortArrow("finalBookPrice")</th>
                 <th style="cursor: pointer;">ISBN</th>
                 <th>Actions</th>
             </tr>
         </thead>
         <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.BookID</td>
                    <td>@book.bookTitle</td>
                    <td>@book.publisherName</td>
                    <td>@book.bookYear</td>
                    <td>@book.bookPriceWVatND.ToString("F2")</td>
                    <td>@book.finalBookPriceNoVat.ToString("F2")</td>
                    <td>@book.finalBookPrice.ToString("F2")</td>
                    <td>@book.ISBN</td>
                    <td>
                        <button @onclick="() => EditBookHandle(book.BookID)">Edit</button>
                        <button @onclick="() => DeleteBookHandle(book.BookID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
     </table>
 </div>

@code{
    private List<KouintaBook> books = SharedServices.books;
    private string currentSortField = string.Empty;
    private bool isAscending = true;
    private string searchInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTableData();
    }

    private async Task UpdateTableData()
    {
        books = await bookrepo.GetAllBooksAsync();
        books = books.OrderBy(x => x.bookYear).ThenBy(x => x.bookPriceWVatND).ToList();
    }

    private void NewBookHandle()
    {
        navManager.NavigateTo("/book/new");
    }

    private void EditBookHandle(int BookID)
    {
        navManager.NavigateTo($"/book/edit/{BookID}");
    }

    private async Task DeleteBookHandle(int BookID)
    {
        await bookrepo.DeleteBookAsync(BookID);
        await UpdateTableData();
    }

    private void SortBooksByHeader(string orderByField)
    {
        if (currentSortField == orderByField)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortField = orderByField;
            isAscending = true;
        }
        SortBooks(orderByField);
    }

    private void SortBooks(string orderByField)
    {
        var property = typeof(KouintaBook).GetProperty(orderByField, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
        if (property == null)
        {
            // Handle the case where the property is not found
            return;
        }
        if (isAscending)
        {
            books = books.OrderBy(x => property.GetValue(x, null)).ToList();
        }
        else
        {
            books = books.OrderByDescending(x => property.GetValue(x, null)).ToList();
        }
    }

    private string RenderSortArrow(string field)
    {
        if (currentSortField == field)
        {
            if (isAscending)
            {
                return " ▲";
            }
            else
            {
                return " ▼";
            }
        }
        return string.Empty;
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrEmpty(searchInput))
        {
            books = books.Where(x => x.bookTitle.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            books = books.OrderBy(x => x.bookYear).ThenBy(x => x.bookPriceWVatND).ToList();
        }
    }
}
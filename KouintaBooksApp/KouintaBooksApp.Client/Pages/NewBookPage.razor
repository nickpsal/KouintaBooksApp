@page "/book/new"
@rendermode InteractiveServer

<PageTitle>Insert New Book</PageTitle>
<EditForm Model="@formData" OnValidSubmit="HandleFormSubmit" formname="newTaskForm">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="bookTitle">Book Title:</label>
        <InputText id="bookTitle" @bind-Value="formData.bookTitle" class="form-control" />
        <ValidationMessage For="@(() => formData.bookTitle)" />
    </div>
    <div class="form-group">
        <label for="publisherName">Publisher Name:</label>
        <InputText id="publisherName" @bind-Value="formData.publisherName" class="form-control" />
        <ValidationMessage For="@(() => formData.publisherName)" />
    </div>
    <div class="form-group">
        <label for="bookYear">Book Year:</label>
        <InputText id="bookYear" @bind-Value="formData.bookYear" class="form-control" />
        <ValidationMessage For="@(() => formData.bookYear)" />
    </div>
    <div class="form-group">
        <label for="bookPrice">Book Price With Vat:</label>
        <InputText id="bookPrice" @bind-Value="formData.bookPrice" class="form-control" />
        <ValidationMessage For="@(() => formData.bookPrice)" />
    </div>
    <div class="form-group">
        <label for="ISBN">ISBN:</label>
        <InputText id="ISBN" @bind-Value="formData.ISBN" class="form-control" />
        <ValidationMessage For="@(() => formData.ISBN)" />
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    private FormData formData = new();
    private KouintaBook? newBook;
    private class FormData
    {
        [Required(ErrorMessage = "book Title is required")]
        public string bookTitle { get; set; } = string.Empty;
        [Required(ErrorMessage = "publisher Name is required")]
        public string publisherName { get; set; } = string.Empty;
        [Required(ErrorMessage = "book Year is required")]
        [StringLength(4, ErrorMessage = "Field must have exactly 4 characters.")]
        [RegularExpression("^[0-9]{4}$", ErrorMessage = "Field must be a 4-digit number.")]
        public string bookYear { get; set; } = string.Empty;
        [Required(ErrorMessage = "book Price With Vat is required")]
        public string bookPrice { get; set; } = string.Empty;
        [Required(ErrorMessage = "ISBN is required")]
        public string ISBN { get; set; } = string.Empty;
    }

    private async Task HandleFormSubmit()
    {
        int.TryParse(formData.bookYear, out int BookYear);
        float.TryParse(formData.bookPrice, out float bookPriceWithVAT);
        float FinalPriceWithVat = bookPriceWithVAT - (bookPriceWithVAT * 30 / 100);
        float FinalPriceNoVat = (float)(FinalPriceWithVat / 1.06);
        newBook.bookTitle = formData.bookTitle;
        newBook.bookTitle = formData.bookTitle;
        newBook.publisherName = formData.publisherName;
        newBook.bookYear = BookYear;
        newBook.bookPriceWVatND = bookPriceWithVAT;
        newBook.finalBookPrice = FinalPriceWithVat;
        newBook.finalBookPriceNoVat = FinalPriceNoVat;
        await bookrepo.AddBookAsync(newBook);
        navManager.NavigateTo("/");
    }
}
